version: '3.8'

services:
  postgres:
    container_name: postgres
    image: 'postgres:15'
    env_file:
      - ./.env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - TIME_ZONE=${TIME_ZONE}
    ports:
      - ${POSTGRES_PORT}:5432
    volumes:
      - db:/data/db
    labels:
      org.springframework.boot.readiness-check.tcp.disable: true

  activemq:
    image: rmohr/activemq
    container_name: activemq
    ports:
      - ${ACTIVEMQ_WEB_PORT}:8161       # broker (admin:adminactivemq)(amq:amq)
      - ${ACTIVEMQ_BROKER_PORT}:61616   # web    http://boot2docker:8161/admin (admin:admin)
    volumes:
      - ./activemq.xml:/opt/activemq/conf/activemq.xml

  config:
    build:
      context: ./config/
      dockerfile: Dockerfile
    restart: on-failure
    container_name: config
    ports:
      - "8888:8888"

  eureka:
    build:
      context: ./eureka/
      dockerfile: Dockerfile
    container_name: eureka
    restart: on-failure
    ports:
      - "8761:8761"
    env_file:
      - ./.env
    environment:
      - ADMIN_SERVICE_HOST=admin_panel
      - CONFIG_URL=http://root:s3cr3t@config:8888
    depends_on:
      - config

  admin-panel:
    build:
      context: ./admin-panel/
      dockerfile: Dockerfile
    container_name: admin_panel
    restart: on-failure
    ports:
      - "8002:8002"
    env_file:
      - ./.env
    environment:
      - EUREKA_HOST=eureka
      - CONFIG_URL=http://root:s3cr3t@config:8888
    depends_on:
      - config

  faculty:
    build:
      context: ./faculty/
      dockerfile: Dockerfile
    container_name: faculty
    restart: on-failure
    ports:
      - "8001:8001"
      - "9001:0001"
    env_file:
      - ./.env
    environment:
      - EUREKA_HOST=eureka
      - CONFIG_URL=http://root:s3cr3t@config:8888
      - POSTGRES_PORT=5432
      - POSTGRES_HOST=postgres
      - ADMIN_SERVICE_HOST=admin_panel
      - ACTIVEMQ_BROKER_HOST=activemq
      - GATEWAY_HOST=gateway
      - GATEWAY_PORT=8010
    depends_on:
      - postgres
      - eureka
      - config

  auth:
    build:
      context: ./auth/
      dockerfile: Dockerfile
    container_name: auth
    restart: on-failure
    ports:
      - "8000:8000"
      - "9000:9000"
    env_file:
      - ./.env
    environment:
      - EUREKA_HOST=eureka
      - EUREKA_PORT=8761
      - CONFIG_URL=http://root:s3cr3t@config:8888
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - ADMIN_SERVICE_HOST=admin_panel
      - ADMIN_SERVICE_PORT=8888
      - ACTIVEMQ_BROKER_HOST=activemq
      - GATEWAY_HOST=gateway
      - GATEWAY_PORT=8010
    depends_on:
      - postgres
      - eureka
      - config

  analytics:
    build:
      context: ./analytics/
      dockerfile: Dockerfile
    container_name: analytics
    restart: on-failure
    ports:
      - "8005:8005"
    env_file:
      - ./.env
    environment:
      - EUREKA_HOST=eureka
      - EUREKA_PORT=8761
      - CONFIG_URL=http://root:s3cr3t@config:8888
      - ADMIN_SERVICE_HOST=admin_panel
      - ADMIN_SERVICE_PORT=8888
      - ACTIVEMQ_BROKER_HOST=activemq
    depends_on:
      - eureka
      - config

  enrollment:
    build:
      context: ./enrollment/
      dockerfile: Dockerfile
    container_name: enrollment
    restart: on-failure
    ports:
      - "8003:8003"
    env_file:
      - ./.env
    environment:
      - GRPC_AUTH_CLIENT_URI=auth:9000
      - GRPC_DISCIPLINE_CLIENT_URI=faculty:9001
      - EUREKA_HOST=eureka
      - EUREKA_PORT=8761
      - CONFIG_URL=http://root:s3cr3t@config:8888
      - POSTGRES_PORT=5432
      - POSTGRES_HOST=postgres
      - ADMIN_SERVICE_HOST=admin_panel
      - ADMIN_SERVICE_PORT=8888
      - ACTIVEMQ_BROKER_HOST=activemq
      - GATEWAY_HOST=gateway
      - GATEWAY_PORT=8010
    depends_on:
      - faculty
      - auth
      - eureka
      - config

  gateway:
    build:
      context: ./gateway/
      dockerfile: Dockerfile
    container_name: gateway
    restart: on-failure
    ports:
      - "8010:8010"
    env_file:
      - ./.env
    environment:
      - EUREKA_PORT=8761
      - CONFIG_URL=http://root:s3cr3t@config:8888
      - ADMIN_SERVICE_PORT=8888
      - ACTIVEMQ_BROKER_HOST=activemq
      - USER_SERVICE_PORT=8000
      - USER_SERVICE_HOST=auth
      - ADMIN_SERVICE_HOST=admin-panel
      - FACULTY_SERVICE_HOST=faculty
      - FACULTY_SERVICE_PORT=8001
      - ENROLLMENT_SERVICE_HOST=enrollment
      - ENROLLMENT_SERVICE_PORT=8003
      - ANALYTICS_SERVICE_PORT=8005
      - ANALYTICS_SERVICE_HOST=analytics
      - GATEWAY_PORT=8010
      - NOTIFICATION_SERVICE_PORT=8004
      - NOTIFICATION_SERVICE_HOST=notification
    depends_on:
      - eureka
      - config
      - auth
      - enrollment
      - faculty

  notification:
    build:
      context: ./notification/
      dockerfile: Dockerfile
    container_name: notification
    restart: on-failure
    ports:
      - "8004:8004"
    env_file:
      - ./.env
    environment:
      - EUREKA_HOST=eureka
      - EUREKA_PORT=8761
      - CONFIG_URL=http://root:s3cr3t@config:8888
      - ADMIN_SERVICE_HOST=admin_panel
      - ADMIN_SERVICE_PORT=8888
      - ACTIVEMQ_BROKER_HOST=activemq
    depends_on:
      - eureka
      - config

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.12.0
    container_name: elasticsearch
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    cap_add:
      - IPC_LOCK
    volumes:
      - elasticsearch-data-volume:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - elk

  logstash:
    image: docker.elastic.co/logstash/logstash:7.12.0
    container_name: logstash
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./spring-boot-microservices.log:/usr/share/logstash/spring-boot-microservices.log
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTICSEARCH_HOST: http://elasticsearch:9200/
      xpack.monitoring.enabled: true
      pipeline.ecs_compatibility: disabled
    ports:
      - "5001:5000"
    depends_on:
      - elasticsearch
    networks:
      - elk

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.12.0
    environment:
      SERVER_NAME: kibana
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - elk

volumes:
  db:
    driver:
      local
  elasticsearch-data-volume:
    driver: local

networks:
  elk:
    driver: bridge